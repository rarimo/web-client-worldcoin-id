/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export declare namespace WorldIDIdentityManagerImplV1 {
  export type RootInfoStruct = {
    root: BigNumberish;
    supersededTimestamp: BigNumberish;
    isValid: boolean;
  };

  export type RootInfoStructOutput = [BigNumber, BigNumber, boolean] & {
    root: BigNumber;
    supersededTimestamp: BigNumber;
    isValid: boolean;
  };
}

export interface WorldIDIdentityManagerImplV2Interface extends utils.Interface {
  functions: {
    "NO_SUCH_ROOT()": FunctionFragment;
    "acceptOwnership()": FunctionFragment;
    "calculateIdentityDeletionInputHash(bytes,uint256,uint256,uint32)": FunctionFragment;
    "calculateIdentityRegistrationInputHash(uint32,uint256,uint256,uint256[])": FunctionFragment;
    "deleteIdentities(uint256[8],bytes,uint256,uint256)": FunctionFragment;
    "getDeleteIdentitiesVerifierLookupTableAddress()": FunctionFragment;
    "getRegisterIdentitiesVerifierLookupTableAddress()": FunctionFragment;
    "getRootHistoryExpiry()": FunctionFragment;
    "getSemaphoreVerifierAddress()": FunctionFragment;
    "getTreeDepth()": FunctionFragment;
    "identityOperator()": FunctionFragment;
    "initialize(uint8,uint256,address,address,address)": FunctionFragment;
    "initializeV2(address)": FunctionFragment;
    "latestRoot()": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "queryRoot(uint256)": FunctionFragment;
    "registerIdentities(uint256[8],uint256,uint32,uint256[],uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requireValidRoot(uint256)": FunctionFragment;
    "setDeleteIdentitiesVerifierLookupTable(address)": FunctionFragment;
    "setIdentityOperator(address)": FunctionFragment;
    "setRegisterIdentitiesVerifierLookupTable(address)": FunctionFragment;
    "setRootHistoryExpiry(uint256)": FunctionFragment;
    "setSemaphoreVerifier(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NO_SUCH_ROOT"
      | "acceptOwnership"
      | "calculateIdentityDeletionInputHash"
      | "calculateIdentityRegistrationInputHash"
      | "deleteIdentities"
      | "getDeleteIdentitiesVerifierLookupTableAddress"
      | "getRegisterIdentitiesVerifierLookupTableAddress"
      | "getRootHistoryExpiry"
      | "getSemaphoreVerifierAddress"
      | "getTreeDepth"
      | "identityOperator"
      | "initialize"
      | "initializeV2"
      | "latestRoot"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "queryRoot"
      | "registerIdentities"
      | "renounceOwnership"
      | "requireValidRoot"
      | "setDeleteIdentitiesVerifierLookupTable"
      | "setIdentityOperator"
      | "setRegisterIdentitiesVerifierLookupTable"
      | "setRootHistoryExpiry"
      | "setSemaphoreVerifier"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "NO_SUCH_ROOT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateIdentityDeletionInputHash",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateIdentityRegistrationInputHash",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteIdentities",
    values: [BigNumberish[], BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeleteIdentitiesVerifierLookupTableAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisterIdentitiesVerifierLookupTableAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRootHistoryExpiry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSemaphoreVerifierAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreeDepth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "identityOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [BigNumberish, BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initializeV2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "queryRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerIdentities",
    values: [
      BigNumberish[],
      BigNumberish,
      BigNumberish,
      BigNumberish[],
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requireValidRoot",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDeleteIdentitiesVerifierLookupTable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setIdentityOperator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRegisterIdentitiesVerifierLookupTable",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setRootHistoryExpiry",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSemaphoreVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "NO_SUCH_ROOT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateIdentityDeletionInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateIdentityRegistrationInputHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteIdentities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDeleteIdentitiesVerifierLookupTableAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisterIdentitiesVerifierLookupTableAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRootHistoryExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSemaphoreVerifierAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreeDepth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "latestRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "queryRoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerIdentities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requireValidRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDeleteIdentitiesVerifierLookupTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIdentityOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRegisterIdentitiesVerifierLookupTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRootHistoryExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSemaphoreVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "DependencyUpdated(uint8,address,address)": EventFragment;
    "IdentityOperatorChanged(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RootHistoryExpirySet(uint256,uint256)": EventFragment;
    "StateBridgeStateChange(bool)": EventFragment;
    "TreeChanged(uint256,uint8,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WorldIDIdentityManagerImplInitialized(uint8,uint256)": EventFragment;
    "WorldIDIdentityManagerImplV2Initialized()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DependencyUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentityOperatorChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootHistoryExpirySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StateBridgeStateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreeChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WorldIDIdentityManagerImplInitialized"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "WorldIDIdentityManagerImplV2Initialized"
  ): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface DependencyUpdatedEventObject {
  kind: number;
  oldAddress: string;
  newAddress: string;
}
export type DependencyUpdatedEvent = TypedEvent<
  [number, string, string],
  DependencyUpdatedEventObject
>;

export type DependencyUpdatedEventFilter =
  TypedEventFilter<DependencyUpdatedEvent>;

export interface IdentityOperatorChangedEventObject {
  oldOperator: string;
  newOperator: string;
}
export type IdentityOperatorChangedEvent = TypedEvent<
  [string, string],
  IdentityOperatorChangedEventObject
>;

export type IdentityOperatorChangedEventFilter =
  TypedEventFilter<IdentityOperatorChangedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RootHistoryExpirySetEventObject {
  oldExpiryTime: BigNumber;
  newExpiryTime: BigNumber;
}
export type RootHistoryExpirySetEvent = TypedEvent<
  [BigNumber, BigNumber],
  RootHistoryExpirySetEventObject
>;

export type RootHistoryExpirySetEventFilter =
  TypedEventFilter<RootHistoryExpirySetEvent>;

export interface StateBridgeStateChangeEventObject {
  isEnabled: boolean;
}
export type StateBridgeStateChangeEvent = TypedEvent<
  [boolean],
  StateBridgeStateChangeEventObject
>;

export type StateBridgeStateChangeEventFilter =
  TypedEventFilter<StateBridgeStateChangeEvent>;

export interface TreeChangedEventObject {
  preRoot: BigNumber;
  kind: number;
  postRoot: BigNumber;
}
export type TreeChangedEvent = TypedEvent<
  [BigNumber, number, BigNumber],
  TreeChangedEventObject
>;

export type TreeChangedEventFilter = TypedEventFilter<TreeChangedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WorldIDIdentityManagerImplInitializedEventObject {
  _treeDepth: number;
  initialRoot: BigNumber;
}
export type WorldIDIdentityManagerImplInitializedEvent = TypedEvent<
  [number, BigNumber],
  WorldIDIdentityManagerImplInitializedEventObject
>;

export type WorldIDIdentityManagerImplInitializedEventFilter =
  TypedEventFilter<WorldIDIdentityManagerImplInitializedEvent>;

export interface WorldIDIdentityManagerImplV2InitializedEventObject {}
export type WorldIDIdentityManagerImplV2InitializedEvent = TypedEvent<
  [],
  WorldIDIdentityManagerImplV2InitializedEventObject
>;

export type WorldIDIdentityManagerImplV2InitializedEventFilter =
  TypedEventFilter<WorldIDIdentityManagerImplV2InitializedEvent>;

export interface WorldIDIdentityManagerImplV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WorldIDIdentityManagerImplV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NO_SUCH_ROOT(
      overrides?: CallOverrides
    ): Promise<
      [WorldIDIdentityManagerImplV1.RootInfoStructOutput] & {
        rootInfo: WorldIDIdentityManagerImplV1.RootInfoStructOutput;
      }
    >;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    calculateIdentityDeletionInputHash(
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    calculateIdentityRegistrationInputHash(
      startIndex: BigNumberish,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      identityCommitments: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[string] & { hash: string }>;

    deleteIdentities(
      deletionProof: BigNumberish[],
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getDeleteIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRegisterIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRootHistoryExpiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSemaphoreVerifierAddress(overrides?: CallOverrides): Promise<[string]>;

    getTreeDepth(overrides?: CallOverrides): Promise<[number]>;

    identityOperator(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _treeDepth: BigNumberish,
      initialRoot: BigNumberish,
      _batchInsertionVerifiers: string,
      _batchUpdateVerifiers: string,
      _semaphoreVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    initializeV2(
      _batchDeletionVerifiers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    latestRoot(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    queryRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[WorldIDIdentityManagerImplV1.RootInfoStructOutput]>;

    registerIdentities(
      insertionProof: BigNumberish[],
      preRoot: BigNumberish,
      startIndex: BigNumberish,
      identityCommitments: BigNumberish[],
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<[void]>;

    requireValidRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setDeleteIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setIdentityOperator(
      newIdentityOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRegisterIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setRootHistoryExpiry(
      newExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setSemaphoreVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    verifyProof(
      root: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifierHash: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  NO_SUCH_ROOT(
    overrides?: CallOverrides
  ): Promise<WorldIDIdentityManagerImplV1.RootInfoStructOutput>;

  acceptOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  calculateIdentityDeletionInputHash(
    packedDeletionIndices: BytesLike,
    preRoot: BigNumberish,
    postRoot: BigNumberish,
    batchSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  calculateIdentityRegistrationInputHash(
    startIndex: BigNumberish,
    preRoot: BigNumberish,
    postRoot: BigNumberish,
    identityCommitments: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<string>;

  deleteIdentities(
    deletionProof: BigNumberish[],
    packedDeletionIndices: BytesLike,
    preRoot: BigNumberish,
    postRoot: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getDeleteIdentitiesVerifierLookupTableAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  getRegisterIdentitiesVerifierLookupTableAddress(
    overrides?: CallOverrides
  ): Promise<string>;

  getRootHistoryExpiry(overrides?: CallOverrides): Promise<BigNumber>;

  getSemaphoreVerifierAddress(overrides?: CallOverrides): Promise<string>;

  getTreeDepth(overrides?: CallOverrides): Promise<number>;

  identityOperator(overrides?: CallOverrides): Promise<string>;

  initialize(
    _treeDepth: BigNumberish,
    initialRoot: BigNumberish,
    _batchInsertionVerifiers: string,
    _batchUpdateVerifiers: string,
    _semaphoreVerifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  initializeV2(
    _batchDeletionVerifiers: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  latestRoot(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  queryRoot(
    root: BigNumberish,
    overrides?: CallOverrides
  ): Promise<WorldIDIdentityManagerImplV1.RootInfoStructOutput>;

  registerIdentities(
    insertionProof: BigNumberish[],
    preRoot: BigNumberish,
    startIndex: BigNumberish,
    identityCommitments: BigNumberish[],
    postRoot: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: CallOverrides): Promise<void>;

  requireValidRoot(
    root: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  setDeleteIdentitiesVerifierLookupTable(
    newTable: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setIdentityOperator(
    newIdentityOperator: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRegisterIdentitiesVerifierLookupTable(
    newTable: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setRootHistoryExpiry(
    newExpiryTime: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setSemaphoreVerifier(
    newVerifier: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  verifyProof(
    root: BigNumberish,
    signalHash: BigNumberish,
    nullifierHash: BigNumberish,
    externalNullifierHash: BigNumberish,
    proof: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    NO_SUCH_ROOT(
      overrides?: CallOverrides
    ): Promise<WorldIDIdentityManagerImplV1.RootInfoStructOutput>;

    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    calculateIdentityDeletionInputHash(
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    calculateIdentityRegistrationInputHash(
      startIndex: BigNumberish,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      identityCommitments: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<string>;

    deleteIdentities(
      deletionProof: BigNumberish[],
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeleteIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getRegisterIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<string>;

    getRootHistoryExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getSemaphoreVerifierAddress(overrides?: CallOverrides): Promise<string>;

    getTreeDepth(overrides?: CallOverrides): Promise<number>;

    identityOperator(overrides?: CallOverrides): Promise<string>;

    initialize(
      _treeDepth: BigNumberish,
      initialRoot: BigNumberish,
      _batchInsertionVerifiers: string,
      _batchUpdateVerifiers: string,
      _semaphoreVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initializeV2(
      _batchDeletionVerifiers: string,
      overrides?: CallOverrides
    ): Promise<void>;

    latestRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    queryRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<WorldIDIdentityManagerImplV1.RootInfoStructOutput>;

    registerIdentities(
      insertionProof: BigNumberish[],
      preRoot: BigNumberish,
      startIndex: BigNumberish,
      identityCommitments: BigNumberish[],
      postRoot: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requireValidRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDeleteIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdentityOperator(
      newIdentityOperator: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setRegisterIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setRootHistoryExpiry(
      newExpiryTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSemaphoreVerifier(
      newVerifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyProof(
      root: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifierHash: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    "DependencyUpdated(uint8,address,address)"(
      kind?: BigNumberish | null,
      oldAddress?: string | null,
      newAddress?: string | null
    ): DependencyUpdatedEventFilter;
    DependencyUpdated(
      kind?: BigNumberish | null,
      oldAddress?: string | null,
      newAddress?: string | null
    ): DependencyUpdatedEventFilter;

    "IdentityOperatorChanged(address,address)"(
      oldOperator?: string | null,
      newOperator?: string | null
    ): IdentityOperatorChangedEventFilter;
    IdentityOperatorChanged(
      oldOperator?: string | null,
      newOperator?: string | null
    ): IdentityOperatorChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RootHistoryExpirySet(uint256,uint256)"(
      oldExpiryTime?: BigNumberish | null,
      newExpiryTime?: BigNumberish | null
    ): RootHistoryExpirySetEventFilter;
    RootHistoryExpirySet(
      oldExpiryTime?: BigNumberish | null,
      newExpiryTime?: BigNumberish | null
    ): RootHistoryExpirySetEventFilter;

    "StateBridgeStateChange(bool)"(
      isEnabled?: boolean | null
    ): StateBridgeStateChangeEventFilter;
    StateBridgeStateChange(
      isEnabled?: boolean | null
    ): StateBridgeStateChangeEventFilter;

    "TreeChanged(uint256,uint8,uint256)"(
      preRoot?: BigNumberish | null,
      kind?: BigNumberish | null,
      postRoot?: BigNumberish | null
    ): TreeChangedEventFilter;
    TreeChanged(
      preRoot?: BigNumberish | null,
      kind?: BigNumberish | null,
      postRoot?: BigNumberish | null
    ): TreeChangedEventFilter;

    "Upgraded(address)"(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;

    "WorldIDIdentityManagerImplInitialized(uint8,uint256)"(
      _treeDepth?: null,
      initialRoot?: null
    ): WorldIDIdentityManagerImplInitializedEventFilter;
    WorldIDIdentityManagerImplInitialized(
      _treeDepth?: null,
      initialRoot?: null
    ): WorldIDIdentityManagerImplInitializedEventFilter;

    "WorldIDIdentityManagerImplV2Initialized()"(): WorldIDIdentityManagerImplV2InitializedEventFilter;
    WorldIDIdentityManagerImplV2Initialized(): WorldIDIdentityManagerImplV2InitializedEventFilter;
  };

  estimateGas: {
    NO_SUCH_ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    calculateIdentityDeletionInputHash(
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateIdentityRegistrationInputHash(
      startIndex: BigNumberish,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      identityCommitments: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deleteIdentities(
      deletionProof: BigNumberish[],
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getDeleteIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRegisterIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRootHistoryExpiry(overrides?: CallOverrides): Promise<BigNumber>;

    getSemaphoreVerifierAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getTreeDepth(overrides?: CallOverrides): Promise<BigNumber>;

    identityOperator(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _treeDepth: BigNumberish,
      initialRoot: BigNumberish,
      _batchInsertionVerifiers: string,
      _batchUpdateVerifiers: string,
      _semaphoreVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    initializeV2(
      _batchDeletionVerifiers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    latestRoot(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    queryRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerIdentities(
      insertionProof: BigNumberish[],
      preRoot: BigNumberish,
      startIndex: BigNumberish,
      identityCommitments: BigNumberish[],
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<BigNumber>;

    requireValidRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDeleteIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setIdentityOperator(
      newIdentityOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRegisterIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setRootHistoryExpiry(
      newExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setSemaphoreVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    verifyProof(
      root: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifierHash: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NO_SUCH_ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    calculateIdentityDeletionInputHash(
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      batchSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateIdentityRegistrationInputHash(
      startIndex: BigNumberish,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      identityCommitments: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deleteIdentities(
      deletionProof: BigNumberish[],
      packedDeletionIndices: BytesLike,
      preRoot: BigNumberish,
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getDeleteIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisterIdentitiesVerifierLookupTableAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRootHistoryExpiry(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSemaphoreVerifierAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTreeDepth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identityOperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _treeDepth: BigNumberish,
      initialRoot: BigNumberish,
      _batchInsertionVerifiers: string,
      _batchUpdateVerifiers: string,
      _semaphoreVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    initializeV2(
      _batchDeletionVerifiers: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    latestRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerIdentities(
      insertionProof: BigNumberish[],
      preRoot: BigNumberish,
      startIndex: BigNumberish,
      identityCommitments: BigNumberish[],
      postRoot: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requireValidRoot(
      root: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDeleteIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setIdentityOperator(
      newIdentityOperator: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRegisterIdentitiesVerifierLookupTable(
      newTable: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setRootHistoryExpiry(
      newExpiryTime: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setSemaphoreVerifier(
      newVerifier: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    verifyProof(
      root: BigNumberish,
      signalHash: BigNumberish,
      nullifierHash: BigNumberish,
      externalNullifierHash: BigNumberish,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
