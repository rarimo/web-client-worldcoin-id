/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface QueryVerifierInterface extends utils.Interface {
  functions: {
    "__Verifier_init(address,address)": FunctionFragment;
    "identityManager()": FunctionFragment;
    "semaphoreVerifier()": FunctionFragment;
    "verifyProof(uint256,uint256,uint256,uint256,uint256[8])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__Verifier_init"
      | "identityManager"
      | "semaphoreVerifier"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__Verifier_init",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "identityManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "semaphoreVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "__Verifier_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identityManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "semaphoreVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface QueryVerifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: QueryVerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __Verifier_init(
      semaphoreVerifier_: string,
      identityManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    identityManager(overrides?: CallOverrides): Promise<[string]>;

    semaphoreVerifier(overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      root_: BigNumberish,
      signalHash_: BigNumberish,
      nullifierHash_: BigNumberish,
      externalNullifierHash_: BigNumberish,
      proof_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  __Verifier_init(
    semaphoreVerifier_: string,
    identityManager_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  identityManager(overrides?: CallOverrides): Promise<string>;

  semaphoreVerifier(overrides?: CallOverrides): Promise<string>;

  verifyProof(
    root_: BigNumberish,
    signalHash_: BigNumberish,
    nullifierHash_: BigNumberish,
    externalNullifierHash_: BigNumberish,
    proof_: BigNumberish[],
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    __Verifier_init(
      semaphoreVerifier_: string,
      identityManager_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    identityManager(overrides?: CallOverrides): Promise<string>;

    semaphoreVerifier(overrides?: CallOverrides): Promise<string>;

    verifyProof(
      root_: BigNumberish,
      signalHash_: BigNumberish,
      nullifierHash_: BigNumberish,
      externalNullifierHash_: BigNumberish,
      proof_: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    __Verifier_init(
      semaphoreVerifier_: string,
      identityManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    identityManager(overrides?: CallOverrides): Promise<BigNumber>;

    semaphoreVerifier(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      root_: BigNumberish,
      signalHash_: BigNumberish,
      nullifierHash_: BigNumberish,
      externalNullifierHash_: BigNumberish,
      proof_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __Verifier_init(
      semaphoreVerifier_: string,
      identityManager_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    identityManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    semaphoreVerifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      root_: BigNumberish,
      signalHash_: BigNumberish,
      nullifierHash_: BigNumberish,
      externalNullifierHash_: BigNumberish,
      proof_: BigNumberish[],
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
